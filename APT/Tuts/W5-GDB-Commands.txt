Need to compile with -g flag to include debug symbols into executable.

    gcc -ansi -pedantic -Wall -g -o 5.exe 5.c

Ignore any warnings that show up.

gdb <executable>
gdb 5.exe

    [e87149@csitprdap03 test]$ gdb 5.exe
    GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
    Copyright (C) 2013 Free Software Foundation, Inc.
    License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
    This is free software: you are free to change and redistribute it.
    There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
    and "show warranty" for details.
    This GDB was configured as "x86_64-redhat-linux-gnu".
    For bug reporting instructions, please see:
    <http://www.gnu.org/software/gdb/bugs/>...
    Reading symbols from /home/el9/E87149/apt/test/5.exe...done.
    (gdb)

run <command-line-arguments>
run

    (gdb) run
    Starting program: /home/el9/E87149/apt/test/5.exe

    Program received signal SIGSEGV, Segmentation fault.
    0x000000000040060e in main () at 5.c:20
    20              intArray[i] = rand() % 10;

backtrace (shortcut: bt)
bt

    (gdb) bt
    #0  0x000000000040060e in main () at 5.c:20

frame <frame-number> (shortcut: f) - can be used to move between frames
f 0

    (gdb) f 0
    #0  0x000000000040060e in main () at 5.c:20
    20              intArray[i] = rand() % 10;

info args
info locals 

    (gdb) info args
    No arguments.
    
    (gdb) info locals
    i = 0
    intArray = 0x4006a0 <__libc_csu_init>
    string = "\t\000\000\000\000\000\000\000F\226\253\367\377\177..."

print/format <variable> (shortcut p)
    Format
        a Pointer.
        c Read as integer, print as character.
        d Integer, signed decimal.
        f Floating point number.
        o Integer, print as octal.
        s Try to treat as C string.
        t Integer, print as binary.
        u Integer, unsigned decimal.
        x Integer, print as hexadecimal.

p i
p intArray
p/a intArray

    (gdb) p i
    $1 = 0
    
    (gdb) p intArray
    $2 = (int *) 0x4006a0 <__libc_csu_init>

quit

    (gdb) quit
    A debugging session is active.

            Inferior 1 [process 36324] will be killed.

    Quit anyway? (y or n) y

Can also set break points.

break <where>
    Where
        function_name
        file:line_number

Once breaked you can step:
    Stepping
        step (shortcut s)
            Go to next instruction (source line), diving
            into function.
        next (shortcut n)
            Go to next instruction (source line) but
            don't dive into functions. 
        finish
            Continue until the current function returns.
        continue (shortcut c)
            Continue normal execution.

    (gdb) break main
    Breakpoint 1 at 0x4005c9: file 5.c, line 18.
    (gdb) run
    Starting program: /home/el9/E87149/apt/test/5.exe

    Breakpoint 1, main () at 5.c:18
    18          for(i = 0; i <= 10; i++)
    (gdb) n
    20              intArray[i] = rand() % 10;
    (gdb) n

    Program received signal SIGSEGV, Segmentation fault.
    0x000000000040060e in main () at 5.c:20
    20              intArray[i] = rand() % 10;

Can also use valgrind to detect errors rather than debugging - a good place to start.

valgrind ./5.exe

    ==35774== Memcheck, a memory error detector
    ==35774== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
    ==35774== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
    ==35774== Command: ./5.exe
    ==35774==
    ==35774== Use of uninitialised value of size 8
    ==35774==    at 0x40060E: main (5.c:20)
    ==35774==
    ==35774==
    ==35774== Process terminating with default action of signal 11 (SIGSEGV)
    ==35774==  Bad permissions for mapped region at address 0x4006A0
    ==35774==    at 0x40060E: main (5.c:20)
    ==35774==
    ==35774== HEAP SUMMARY:
    ==35774==     in use at exit: 0 bytes in 0 blocks
    ==35774==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
    ==35774==
    ==35774== All heap blocks were freed -- no leaks are possible
    ==35774==
    ==35774== For counts of detected and suppressed errors, rerun with: -v
    ==35774== Use --track-origins=yes to see where uninitialised values come from
    ==35774== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 1 from 1)
    Segmentation fault
